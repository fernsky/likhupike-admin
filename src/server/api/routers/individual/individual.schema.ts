import { z } from "zod";

export const createIndividualSchema = z.object({
  parentId: z.string().min(1, "Parent ID is required"),
  wardNo: z.string().transform((val) => (val ? Number(val) : undefined)),
  deviceId: z.string().optional(),
  name: z.string().min(1, "Name is required"),
  gender: z.string().min(1, "Gender is required"),
  age: z.string().transform((val) => (val ? Number(val) : undefined)),
  familyRole: z.string().optional(),
  citizenOf: z.string().optional(),
  citizenOfOther: z.string().optional(),
  caste: z.string().optional(),
  casteOther: z.string().optional(),
  ancestorLanguage: z.string().optional(),
  ancestorLanguageOther: z.string().optional(),
  primaryMotherTongue: z.string().optional(),
  primaryMotherTongueOther: z.string().optional(),
  religion: z.string().optional(),
  religionOther: z.string().optional(),
  maritalStatus: z.string().optional(),
  marriedAge: z.string().transform((val) => (val ? Number(val) : undefined)),
  hasChronicDisease: z.string().optional(),
  primaryChronicDisease: z.string().optional(),
  isSanitized: z.string().optional(),
  isDisabled: z.string().optional(),
  disabilityType: z.string().optional(),
  disabilityTypeOther: z.string().optional(),
  disabilityCause: z.string().optional(),
  hasBirthCertificate: z.string().optional(),
  gaveLiveBirth: z.string().optional(),
  aliveSons: z.string().transform((val) => (val ? Number(val) : undefined)),
  aliveDaughters: z.string().transform((val) => (val ? Number(val) : undefined)),
  totalBornChildren: z.string().transform((val) => (val ? Number(val) : undefined)),
  hasDeadChildren: z.string().optional(),
  deadSons: z.string().transform((val) => (val ? Number(val) : undefined)),
  deadDaughters: z.string().transform((val) => (val ? Number(val) : undefined)),
  totalDeadChildren: z.string().transform((val) => (val ? Number(val) : undefined)),
  gaveRecentLiveBirth: z.string().optional(),
  recentBornSons: z.string().transform((val) => (val ? Number(val) : undefined)),
  recentBornDaughters: z.string().transform((val) => (val ? Number(val) : undefined)),
  totalRecentChildren: z.string().transform((val) => (val ? Number(val) : undefined)),
  recentDeliveryLocation: z.string().optional(),
  prenatalCheckups: z.string().transform((val) => (val ? Number(val) : undefined)),
  firstDeliveryAge: z.string().transform((val) => (val ? Number(val) : undefined)),
  isPresent: z.string().optional(),
  absenteeAge: z.string().transform((val) => (val ? Number(val) : undefined)),
  absenteeEducationalLevel: z.string().optional(),
  absenceReason: z.string().optional(),
  absenteeLocation: z.string().optional(),
  absenteeProvince: z.string().optional(),
  absenteeDistrict: z.string().optional(),
  absenteeCountry: z.string().optional(),
  absenteeHasSentCash: z.string().optional(),
  absenteeCashAmount: z.string().transform((val) => (val ? Number(val) : undefined)),
  literacyStatus: z.string().optional(),
  schoolPresenceStatus: z.string().optional(),
  educationalLevel: z.string().optional(),
  primarySubject: z.string().optional(),
  goesSchool: z.string().optional(),
  schoolBarrier: z.string().optional(),
  hasTraining: z.string().optional(),
  training: z.string().optional(),
  monthsTrained: z.string().transform((val) => (val ? Number(val) : undefined)),
  primarySkill: z.string().optional(),
  hasInternetAccess: z.string().optional(),
  financialWorkDuration: z.string().optional(),
  primaryOccupation: z.string().optional(),
  workBarrier: z.string().optional(),
  workAvailability: z.string().optional(),
});

export const updateIndividualSchema = z.object({
  id: z.string().min(1, "Individual ID is required"),
  parentId: z.string().min(1, "Parent ID is required").optional(),
  wardNo: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  deviceId: z.string().optional(),
  name: z.string().min(1, "Name is required").optional(),
  gender: z.string().min(1, "Gender is required").optional(),
  age: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  familyRole: z.string().optional(),
  citizenOf: z.string().optional(),
  citizenOfOther: z.string().optional(),
  caste: z.string().optional(),
  casteOther: z.string().optional(),
  ancestorLanguage: z.string().optional(),
  ancestorLanguageOther: z.string().optional(),
  primaryMotherTongue: z.string().optional(),
  primaryMotherTongueOther: z.string().optional(),
  religion: z.string().optional(),
  religionOther: z.string().optional(),
  maritalStatus: z.string().optional(),
  marriedAge: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  hasChronicDisease: z.string().optional(),
  primaryChronicDisease: z.string().optional(),
  isSanitized: z.string().optional(),
  isDisabled: z.string().optional(),
  disabilityType: z.string().optional(),
  disabilityTypeOther: z.string().optional(),
  disabilityCause: z.string().optional(),
  hasBirthCertificate: z.string().optional(),
  gaveLiveBirth: z.string().optional(),
  aliveSons: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  aliveDaughters: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  totalBornChildren: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  hasDeadChildren: z.string().optional(),
  deadSons: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  deadDaughters: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  totalDeadChildren: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  gaveRecentLiveBirth: z.string().optional(),
  recentBornSons: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  recentBornDaughters: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  totalRecentChildren: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  recentDeliveryLocation: z.string().optional(),
  prenatalCheckups: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  firstDeliveryAge: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  isPresent: z.string().optional(),
  absenteeAge: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  absenteeEducationalLevel: z.string().optional(),
  absenceReason: z.string().optional(),
  absenteeLocation: z.string().optional(),
  absenteeProvince: z.string().optional(),
  absenteeDistrict: z.string().optional(),
  absenteeCountry: z.string().optional(),
  absenteeHasSentCash: z.string().optional(),
  absenteeCashAmount: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  literacyStatus: z.string().optional(),
  schoolPresenceStatus: z.string().optional(),
  educationalLevel: z.string().optional(),
  primarySubject: z.string().optional(),
  goesSchool: z.string().optional(),
  schoolBarrier: z.string().optional(),
  hasTraining: z.string().optional(),
  training: z.string().optional(),
  monthsTrained: z.string().transform((val) => (val ? Number(val) : undefined)).optional(),
  primarySkill: z.string().optional(),
  hasInternetAccess: z.string().optional(),
  financialWorkDuration: z.string().optional(),
  primaryOccupation: z.string().optional(),
  workBarrier: z.string().optional(),
  workAvailability: z.string().optional(),
});

export type CreateIndividualInput = z.infer<typeof createIndividualSchema>;
export type UpdateIndividualInput = z.infer<typeof updateIndividualSchema>;
